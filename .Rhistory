}
else{
if (N[t]!=-1){
Z[t] = 0
N0[t] = N[t]
NE[t]=0             # no event at time t
}
else{
Z[t]=0
N0[t]=rpois(1,L[t])
NE[t]=0
}
}
ptmp = matrix(0,2,1)
ptmp[Z[t]+1] <- 1    # compute backward influence
if (t>1) {
p[,t-1] <- p[,t-1]*(t(M)%*%ptmp)
p[,t-1] <- p[,t-1]/sum(p[,t-1])
}
}
out<-list()
out$Z<-Z
out$N0<-N0
out$NE<-NE
#out$p<-p
#out$po<-po
return(out)
}
draw_M_Z <- function(Z,prior){
n01 = length(which(Z[1:length(Z)-1]==0 & Z[2:length(Z)]==1))
n0 = length(which(Z[1:length(Z)-1]==0))
n10 = length(which(Z[1:length(Z)-1]==1 & Z[2:length(Z)==0]))
n1 = length(which(Z[1:length(Z)-1]==1))
z0 = rbeta(1,n01+prior$z01,n0-n01+prior$z00)
z1 = rbeta(1,n10+prior$z10,n1-n10+prior$z11)
M = t(matrix(c(1-z0, z1, z0,1-z1),nrow=2,ncol=2))
return(M)
}
draw_L_N0<- function(N0,prior,EQUIV){
Nd=7;
Nh=dim(N0)[1]
#1st: OVERALL AVERAGE RATE
if (prior$MODE){
L0 = (sum(N0)+prior$aL)/(length(N0)+prior$bL)
} else{
L0 = rgamma(1,shape=sum(N0)+prior$aL,scale=1/(length(N0)+prior$bL))
}
L = matrix(0,dim(N0)[1],dim(N0)[2]) + L0;
# 2nd: DAY EFFECT
D = matrix(0,1,Nd)
for(i in 1:length(D)){
alpha =  sum(N0[,seq(i,dim(N0)[2],7)])+prior$aD[i];
if (prior$MODE)
D[i] = (alpha-1)           #mode of Gamma(a,1) distribution
else
D[i] = rgamma(1,alpha,scale=1)
}
# 3rd: TIME OF DAY EFFECT
A = matrix(0,Nh,Nd);
for (tau in 1:(dim(A)[2])){
for (i in 1:dim(A)[1]){
alpha = sum(N0[i,seq(tau,dim(N0)[2],7)])+prior$aH[i]
if (prior$MODE)
A[i,tau] = (alpha-1)           # mode of Gamma(a,1) distribution
else
A[i,tau] = rgamma(1,alpha,scale=1)
}
}
# ENFORCE PARAMETER SHARING
if (EQUIV[1]==1){
D[1:7] = 1
} else if(EQUIV[1]==2){
D[c(1,7)] = mean(D[c(1,7)])
D[2:6]=mean(D[2:6])
D=D/mean(D)
} else if(EQUIV[1]==3){
D = D/mean(D)
}
###FIX THIS
# tau(t)
if(EQUIV[2]==1){
A[,1:7] = repmat(matrix(rowMeans(A)),1,dim(A)[2])
} else if (EQUIV[2]==2){
A[,c(1,7)] <- repmat(matrix(rowMeans(A[,c(1,7)])),1,2)
A[,2:6]<-repmat(matrix(rowMeans(A[,2:6])),1,5)
} else if(EQUIV[2]==3){ A<-A
}
for (tau in 1:dim(A)[2]){
A[,tau]=A[,tau]/mean(A[,tau])
}
# COMPUTE L(t)
for (d in 1:dim(L)[2]){
for (t in 1:dim(L)[1]){
dd=(d-1)%%7+1;
L[t,d] = L0*D[dd]*A[t,dd]; #fix this line
}
}
return(L)
}
###Evaluation functions
logp<-function(N,samples,priors,iter,EQUIV){
#estimates the marginal likelihood of the data using the samples
tmp<-samples$logp_NgLZ[1:iter]
tmpm<-mean(tmp)
temp<-tmp-tmpm
logpGDz<-log(1/mean(1/exp(tmp)))+tmpm #Gelfand-Dey estimate
tmp<-samples$logp_NgLZ[1:iter]
tmpm<-mean(tmp)
temp<-tmp-tmpm
logpGD<-log(1/mean(1/exp(tmp)))+tmpm #Gelfand-Dey estimate, marginalizing over Z
Lstar<-apply(samples$L,c(1,2),mean)
Mstar<-apply(samples$M,c(1,2),mean)
logp_LMgN<-matrix(0,1,iter)
logp_LM <- eval_L_N0(Lstar,vector(),priors,EQUIV)+eval_M_Z(Mstar,0,priors)
logp_NgLM <- eval_N_LM(N,Lstar,Mstar,priors)
for (ii in 1:iter){
logp_LMgN[ii]<-eval_L_N0(Lstar,samples$N0[,,ii],priors,EQUIV)+eval_M_Z(Mstar,samples$Z[,,ii],priors)
}
tmpm<-mean(exp(logp_LMgN))+tmpm
logpC<-logp_NgLM+logp_LM-logp_LMgN #Chib estimate
}
eval_M_Z <- function(M,Z,prior){ #evaluate p(M|Z)
z1 = M[1,2]
z0 = M[2,1]
n01=0
n0=0
n10=0
n1=0
if (length(Z)!=0){
n01 = sum(Z[1:length(Z)-1]==0 & Z[2:length(Z)]==1)
n0=sum(Z[1:length(Z)-1]==0)
n10 =  sum(Z[1:length(Z)-1]==1 & Z[2:length(Z)]==0)
n1=sum(Z[1:length(Z)-1]==1)
} else {n01<-0
n0<-0
n10<-0
n1<-0}
logp <- log(pbeta(z0,n01+prior$z01,n0-n01+prior$z00)) + log(pbeta(z1,n10+prior$z10,n1-n10+prior$z11))
return(logp)
}
eval_L_N0 <- function(L,N0,prior,EQUIV){  # evaluate p(L | N0)
L0 = mean(L)
Nd = 7
Nh=dim(L)[1]
A<-matrix(0,Nh,Nd)
D<-rep(NA,Nd)
for (i in 1:Nd) {
D[i] = mean(L[,i]/L0)
}
for (i in 1:Nd){
for (j in 1:Nh){
A[j,i] = L[j,i]/L0/D[i]
}
}
logp = 0;
# ENFORCE PARAMETER SHARING
paD<-prior$aD;
aD<-matrix(0,1,Nd);
paH<-prior$aH;
dim(paH)
aH<-matrix(0,Nh,Nd);
if (length(N0)!=0){
for (i in 1:Nd){
aD[i] = sum(N0[,seq(i,dim(N0)[2],Nd)]) #fix this line
}
for (i in 1:Nd){
for (j in 1:Nh){
aH[j,i] = sum(N0[j,seq(i,dim(N0)[2],Nd)])
}
}
}
if (EQUIV[1]==1){ #d(t)
D = sum(D)
paD = sum(paD)
aD=sum(aD)
} else if (EQUIV[1]==2){
D = c(D[1]+D[7],sum(D[2:6]));
paD=c(paD[1]+paD[7],sum(paD[2:6]))
aD=c(aD[1]+aD[7],sum(aD[2:6]));
} else if (EQUIV[1]==3){
D = D; paD = paD; paH=paH;
}
if(EQUIV[2]==1){ # tau(t)
A<-matrix(rowSums(A)/Nd)
aH<-matrix(rowSums(aH))
paH<-matrix(rowSums(paH))
} else if(EQUIV[2]==2){
A = matrix(c((A[,1]+A[,7])/2,rowSums(A[,2:6])/5))
aH = matrix(c(aH[,1]+aH[,7],rowSums(aH[,2:6])))
paH = matrix(c(paH[,1]+paH[,7],rowSums(paH[,2:6])))
} else if(EQUIV[2]==3){
A<-A
aH=aH
paH=paH
}
logp = logp + log(pgamma(L0,sum(sum(N0))+prior$aL,1/(length(N0)+prior$bL)));
logp = logp + log(dirpdf(D/Nd,aD + paD));
for (i in 1:dim(A)[2]){
logp = logp + log(dirpdf(A[,i]/Nh,aH[,i]+paH[,i]))
}
return(logp)
}
eval_N_LM<-function(N,L,M,prior) { 	# evaluate p(N | L,M)
PRIOR <-M%^%100%*%as.vector(c(1,0))
po <-matrix(0,2,length(N));
p  <-matrix(0,2,length(N));
for (t in 1:length(N)){
if (N[t]!=-1){
po[1,t] = dpois(N[t],L[t]);
po[2,t] = sum(dpois(0:N[t],L[t])*dnbinom(rev(0:N[t]),prior$aE,prior$bE/(1+priors$bE)))
}
else{ po[1,t]=1
po[2,t]=1
}
}
p[,1] = PRIOR*po[,1]
sp=sum(p[,1])
logp = log(sp);
p[,1]=p[,1]/sp;
for (t in 2:length(N)){
p[,t] = (M%*%p[,t-1])*po[,t]
sp=sum(p[,t])
logp = logp + log(sp);
p[,t]=p[,t]/sp;
}
return(logp)
}
eval_N_LZ <- function(N,L,Z,prior){ 	#evaluate p(N|L,Z)
logp = 0;
for (t in 1:length(N)){
if (N[t]!=-1){
if (Z[t]==0){
logp = logp + log(dpois(N[t],L[t]))
}
else{
logp = logp + log(sum(dpois(0:N[t],L[t])*dnbinom(rev(0:N[t]),prior$aE,prior$bE/(1+prior$bE))))
}
}
}
return(logp)
}
':=' = function(lhs, rhs) {
frame = parent.frame()
lhs = as.list(substitute(lhs))
if (length(lhs) > 1)
lhs = lhs[-1]
if (length(lhs) == 1) {
do.call(`=`, list(lhs[[1]], rhs), envir=frame)
return(invisible(NULL)) }
if (is.function(rhs) || is(rhs, 'formula'))
rhs = list(rhs)
if (length(lhs) > length(rhs))
rhs = c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
for (i in 1:length(lhs))
do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
return(invisible(NULL)) }
mmPPlot<-function(L,Z,N,TRUTH,FIG,RANGE){
if(!exists('RANGE')){
RANGE<-1:length(Z)
}
}
debugSource('D:/MCMC/MMPP-master/run_model.R')
source('D:/MCMC/MMPP-master/run_model.R')
debugSource('D:/MCMC/MMPP-master/run_model.R')
debugSource('D:/MCMC/MMPP-master/MMPP.R')
debugSource('D:/MCMC/MMPP-master/run_model.R')
# Title     : TODO
# Objective : TODO
# Created by: lenovo
# Created on: 2019/2/2
d=read.csv("precessed_data.csv")
m=as.matrix(d['count'])
N=matrix(m,48,64)
e=matrix(0,48,64)
source("MMPP.R")
dim(N[,1:63])
debugSource('D:/MCMC/MMPP-master/run_model.R')
sum(N0)
dim(N0)
seq(1,63,7)
Nd
seq(2,63,7)
seq(7,63,7)
samples <- sensorMMPP(N[,1:63], priors, c(50, 10, 1), e, c(3, 3))
z=samples$Z
sum(z[,,1]>0.5)
sum(z[,,1]==1)
sum(z[,,50]==1)
sum(z[,,50])
length(z[,,50])
zmean=apply(samples$Z,c(1,2),mean)
plot(zmean)
plot(zmean)
zmean
plot(as.vector(zmean))
debugSource('D:/MCMC/MMPP-master/run_model.R')
D
D
prior$aD
dim(A)
tau
dim(N0)
dim(A)
seq(7,63,7)
prior$aH
D
A
A
dim(A)
A
dim(L)
4%%7
4%7
4%%7
7%%7
colMeans(L)
PRIOR
M
PRIOR
po[,1]
N[1]
L[1]
0:5
dpois(500,500)
dpois(320,233)
dpois(100,233)
po[,1]
N
dim(N)
dim(N[,seq(1,63,7)])
dim(L)
N[1]
dim(N[1,seq(1,63,7)])
N[1,seq(1,63,7)]
mean(N[1,seq(1,63,7)])
plot(zmean,type='l')
plot(as.vector(zmean),type='l')
dpois(129,223)
po[,2]
N[2]
L[2]
mean(N[2,seq(1,63,7)])
N[2]
N[2,seq(1,63,7)]
N[3,seq(1,63,7)]
N[30,seq(1,63,7)]
dim(L)
L[30,seq(1,63,7)]
Z
dim(Z)
samples$Z[,,1]
po[,1]
po[,2]
sum(samples$Z[,,1])
sum(samples$Z[,,2])
sum(samples$Z[,,3])
sum(samples$Z[,,50])
sum(samples$Z[,,49])
N
debugSource('D:/MCMC/MMPP-master/run_model.R')
po[,1]
samples <- sensorMMPP(N[,1:63], priors, c(50, 10, 1), e, c(3, 3))
samples$Z[,,1]
sum(samples$Z[,,1])
sum(samples$Z[,,50])
zmean=apply(samples$Z,c(1,2),mean)
plot(as.vector(zmean))
samples <- sensorMMPP(N[,1:63], priors, c(50, 10, 1), e, c(3, 3))
sum(samples$Z[,,50])
sum(samples$Z[,,1])
zmean=apply(samples$Z,c(1,2),mean)
plot(as.vector(zmean))
priors$bE
priors$aE
source("MMPP.R")
priors$aE
samples <- sensorMMPP(N[,1:63], priors, c(50, 10, 1), e, c(3, 3))
sum(samples$Z[,,1])
sum(samples$Z[,,50])
zmean=apply(samples$Z,c(1,2),mean)
plot(as.vector(zmean))
plot(as.vector(samples$Z[,,50]))
fl=N[,1:63]
fl[1,seq(1,63,7)]
fl[30,seq(1,63,7)]
source("MMPP.R")
prior$aE
priors$aE
priors$bE
source("MMPP.R")
priors$bE
source('D:/MCMC/MMPP-master/MMPP.R')
priors$bE
fl=N[,1:63]
fl[30,seq(1,63,7)]
samples <- sensorMMPP(N[,1:63], priors, c(50, 10, 1), e, c(3, 3))
sum(samples$Z[,,50])
sum(samples$Z[,,1])
rgamma(1,1000,3)
rgamma(1,1000,1/3)
zmean=apply(samples$Z,c(1,2),mean)
plot(as.vector(zmean))
priors$aE
priors$bE
source("MMPP.R")
priors$bE
samples <- sensorMMPP(N[,1:63], priors, c(50, 10, 1), e, c(3, 3))
sum(samples$Z[,,50])
sum(samples$Z[,,1])
zmean=apply(samples$Z,c(1,2),mean)
plot(as.vector(zmean))
samples$L
dim(samples$L)
samples$L[,,50][1,seq(1,63,7)]
samples$L[,,50][1,seq(10,63,7)]
samples$L[,,50][1,seq(17,63,7)]
samples$L[,,50][10,seq(1,63,7)]
samples$L[,,50][20,seq(1,63,7)]
fl[20,seq(1,63,7)]
fl[20,seq(20,63,7)]
fl[20,seq(1,63,7)]
fl[10,seq(1,63,7)]
fl[11,seq(1,63,7)]
fl[14,seq(1,63,7)]
fl[16,seq(1,63,7)]
fl[17,seq(1,63,7)]
fl[18,seq(1,63,7)]
samples$Z[18,seq(1,63,7),50]
samples$Z[20,seq(1,63,7),50]
samples$L[20,seq(1,63,7),50]
fl[20,seq(1,63,7)]
debugSource('D:/MCMC/MMPP-master/run_model.R')
debugSource('D:/MCMC/MMPP-master/MMPP.R')
debugSource('D:/MCMC/MMPP-master/run_model.R')
debugSource('D:/MCMC/MMPP-master/run_model.R')
m
dim(m)
samples$L[20,seq(1,63,7),50]
fl[20,seq(1,63,7)]
mean(fl[20,seq(1,63,7)])
samples$L[30,seq(1,63,7),50]
fl[30,seq(1,63,7)]
dim(fl)
mean(fl[30,seq(1,63,7)])
samples$Z[30,seq(1,63,7),50]
seq(49,56)
seq(42,49)
mean(fl[30,seq(42,49)])
fl[30,seq(42,49)]
samples$Z[30,seq(42,49),50]
samples$Z[,,seq(42,49),50]
samples$Z[,seq(42,49),50]
sum(samples$Z[,seq(42,49),50])
samples$Z[,seq(1,73,7),50]
samples$Z[,seq(1,63,7),50]
samples$Z[1,seq(1,63,7),50]
samples$Z[2,seq(1,63,7),50]
samples$Z[3,seq(1,63,7),50]
samples$Z[5,seq(1,63,7),50]
samples$Z[20,seq(1,63,7),50]
samples$Z[21,seq(1,63,7),50]
samples$L[21,seq(1,63,7),50]
fl[21,seq(1,63,7)]
7*48
plot(as.vector(samples)[1:7*48])
plot(as.vector(zmean)[1:7*48])
as.vector(zmean)[1:7]
as.vector(zmean)[1:7+2]
plot(as.vector(zmean)[1:(7*48)])
names(d)
d['time']
d['time'][1:(7*48)]
d['time'][1:2]
d['time'][1]
dim(d['time'])
d['time'][1,1]
d['time'][1:7,1]
names(zmean)
names(zmean)=d['time'][,1]
names(zmean)=d['time'][1:3024,1]
plot(as.vector(zmean)[1:(7*48)])
dim(zmeans)
dim(zmean)
zm=as.vector(zmean)
names(zm)
names(zm)=d['time'][1:3024,1]
plot(zm[1:(7*48)])
names(zm)
as.Date(d['time'][1,1],format='%Y-%m-%d %h:%m')
zm[1]
zm[3]
plot(zm)
as.Date(d['time'][1,1],format='%Y-%m-%d %H:%M')
as.Date(d['time'][,1],format='%Y-%m-%d %H:%M')
plot(zm,xaxt='n')
axis(1,1:length(zm),names(zm))
7*48
plot(zm[1:48],xaxt='n')
axis(1,1:length(zm[1:48]),names(zm))
axis(1,1:length(zm[1:48]),names(zm[1:48]))
plot(zm,xaxt='n',ylab="第一天事件发生概率")
axis(1,1:length(zm[1:48]),names(zm[1:48]))
plot(zm[1:48],xaxt='n',ylab="第一天事件发生概率")
axis(1,1:length(zm[1:48]),names(zm[1:48]))
names(zm)[1]
names(zm)[1][0]
plot(zm[1:48],type='l',xaxt='n',ylab="第一天事件发生概率")
axis(1,1:length(zm[1:48]),names(zm[1:48]))
plot(zm[1:48],type='l',xaxt='n',ylab="第一天增加事件发生概率")
axis(1,1:length(zm[1:48]),names(zm[1:48]))
plot(zm[1:48],type='l',xlab="时间",xaxt='n',ylab="第一天增加事件发生概率")
axis(1,1:length(zm[1:48]),names(zm[1:48]))
